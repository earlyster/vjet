<project default="launchEclipse" basedir=".">
	<target name="initFromEnv">
		<property environment="env" />

		<!-- for properties from User setting, either as env variable or property-->
		<condition property="ede.eclipse.home" value="${env.ede.eclipse.home}" else="${ede.eclipse.home}">
			<isset property="env.ede.eclipse.home" />
		</condition>

		<condition property="root.home" value="${env.root.home}" else="c:/autotest">
			<isset property="env.root.home" />
		</condition>

		<condition property="component" value="${env.component.name}" else="${component.name}">
			<isset property="env.component.name" />
		</condition>

		<fail message="ede.eclipse.home must be set" unless="ede.eclipse.home" />
		<fail message="component must be set" unless="component" />

		<condition property="emma.enabled" value="${env.emma.enabled}" else="true">
			<isset property="env.emma.enabled" />
		</condition>
		<condition property="findbugs.enabled" value="${env.findbugs.enabled}" else="true">
			<isset property="env.findbugs.enabled" />
		</condition>
		<condition property="javacfailonerror" value="${env.javacfailonerror}" else="true">
			<isset property="env.javacfailonerror" />
		</condition>

		<condition property="eclipse.test.home" value="${env.eclipse.test.home}" else="${root.home}\test\${component}">
			<isset property="env.eclipse.test.home" />
		</condition>

		<condition property="eclipse.testframework.version" value="${env.eclipse.testframework.version}" else="3.3">
			<isset property="env.eclipse.testframework.version" />
		</condition>

	</target>


	<target name="init" depends="initFromEnv">
		<condition property="baseLocation" value="${buildDirectory}/eclipse">
			<isset property="performance.base" />
		</condition>

		<condition property="org.eclipse.test" value="org.eclipse.test_3.1.0">
			<equals arg1="${eclipse.testframework.version}" arg2="3.2" />
		</condition>

		<condition property="org.eclipse.test" value="org.eclipse.test_3.2.0">
			<equals arg1="${eclipse.testframework.version}" arg2="3.3" />
		</condition>

		<fail message="cannot determine your org.eclipse.test property, maybe your eclipse.testframework.version is not supported.{3.2|3.3} only" unless="org.eclipse.test" />


		<pathconvert property="clearcase.view.root" dirsep="/">
			<path location="${basedir}/../../../../../../.." />
		</pathconvert>

		<property name="nexustool.savelocation" value="${clearcase.view.root}\nexustools\com.ebay.tools" />
		<property name="build.project.savelocation" value="${nexustool.savelocation}\com.ebay.tools.testframework\plugins\com.ebay.tools.build" />
		<!--emma and findbugs-->
		<!--emma_home and findbugs_home will be set in env.cmd-->
		<condition property="emma.home" value="${EMMA_HOME}" else="${build.project.savelocation}\build\tool\emma">
			<isset property="EMMA_HOME" />
		</condition>

		<condition property="findbugs.home" value="${FINDBUGS_HOME}" else="${build.project.savelocation}\build\tool\findbugs">
			<isset property="FINDBUGS_HOME" />
		</condition>



		<!-- ===================================================================== -->
		<!--set java compiler arguments -->
		<!-- ===================================================================== -->

		<!--set the compiler and compiler arguments-->
		<!--the default compiler is set to the one used by eclipse rel. eng. -->
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
		<property name="compilerArg" value="-enableJavadoc -encoding ISO-8859-1" />
		<property name="javacSource" value="1.5" />
		<property name="javacTarget" value="1.5" />
		<property name="javacDebugInfo" value="true" />
		<property name="javacFailOnError" value="true" />


		<!--bootclasspath-->
		<path id="default.bootclasspath">
			<fileset dir="${java.home}/lib">
				<include name="*.jar" />
			</fileset>

		</path>

		<property name="bootclasspath" refid="default.bootclasspath" />

		<!--this property required as of Eclipse 3.0 stream builds > 20031126 -->
		<property name="buildingOSGi" value="true" />

		<!-- ===================================================================== -->
		<!-- set emma and findbugs task -->
		<!-- ===================================================================== -->



		<!-- ===================================================================== -->
		<!-- set file path variables -->
		<!-- ===================================================================== -->
		<!--Default values for required properties-->
		<property name="buildDirectory" value="${root.home}/${component}Build/src" />
		<property name="plugin.home" value="${buildDirectory}/plugins" />
		<property name="feature.home" value="${buildDirectory}/features" />
		<property name="builder" value="${basedir}/${component}" />
		<property name="builderDirectory" location="${builder}" />
		<property name="customTargets" location="${builderDirectory}/customTargets.xml" />
		<property name="genericTargets" location="${pde.build.scripts}/genericTargets.xml" />

		<!--default directory where test-eclipse will be installed-->
		<property name="install" value="${eclipse.test.home}/setup" />

		<!-- The root of the eclipse installation -->
		<property name="eclipse-home" value="${install}/eclipse" />


		<property name="library-file" value="${eclipse-home}/plugins/${org.eclipse.test}/library.xml" />
		<property name="JUnit-XSL" value="${eclipse-home}/plugins/${org.eclipse.test}/JUNIT.XSL" />
		<!-- The directory that will contain the xml and html results from the tests that are run -->
		<property name="results" value="${eclipse.test.home}/junit" />
		<property name="coverage.dir" value="${eclipse.test.home}/coverage" />
		<property name="findbugs.dir" value="${eclipse.test.home}/findbugs" />


		<property name="ECLIPSE_TEST_FRAMEWORK_ARCHIVE" value="${clearcase.view.root}\nexustools\com.ebay.tools\com.ebay.tools.testframework\plugins\com.ebay.tools.build.gentool\pdebuild\eclipse-test\${eclipse.testframework.version}\eclipse-test-framework.zip" />

		<available file="${ECLIPSE_TEST_FRAMEWORK_ARCHIVE}" property="eclipse.testframework.exists">
		</available>
		<fail message="Eclipse test framework is not available at: ${ECLIPSE_TEST_FRAMEWORK_ARCHIVE} , please update them from main blanch " unless="eclipse.testframework.exists" />
		<echo message="you are using eclipse test framework version:  ${eclipse.testframework.version} from: ${ECLIPSE_TEST_FRAMEWORK_ARCHIVE}" />



		<echo message="ECLIPSE_HOME is set to = ${ede.eclipse.home}" />
		<echo message="JAVA HOME is set to = ${java.home}" />
		<echo message="EMMA HOME is set to = ${emma.home}" />
		<echo message="FINDBUGS HOME is set to = ${findbugs.home}" />
		<echo message="TEST HOME is set to = ${eclipse.test.home}" />
		<echo message="CLEARCASE VIEW ROOT is set to = ${clearcase.view.root}" />
		<echo message="emma.enabled is set to = ${emma.enabled}" />
		<echo message="findbugs.enabled is set to = ${findbugs.enabled}" />

		<echo message="junit report will be saved to:  ${results}" />
		<echo message="coverage report will be saved to:  ${coverage.dir}" />
		<echo message="findbugs report will be saved to:  ${findbugs.dir}" />


		<path id="emma.lib">
			<pathelement location="${emma.home}/emma.jar" />
			<pathelement location="${emma.home}/emma_ant.jar" />
		</path>

		<available file="${java.home}/lib/ext/emma.jar" property="emma.jar.exists" />
		<antcall target="copy.emma.jar" />

		<!-- this loads <emma> and <emmajava> custom tasks: -->
		<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

		<path id="findbugs.ant.lib">
			<pathelement location="${findbugs.home}/lib/findbugs-ant.jar" />
		</path>

		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.ant.lib" />


		<!--other tasks
		<copy todir="${ant.home}\lib" failonerror="true">
			<fileset file="${build.project.savelocation}/build/antext/AntelopeTasks_3.5.1.jar">
			</fileset>
		</copy>-->



		<!--<taskdef name="for" classname="net.sf.antcontrib.logic.For" />-->

		<taskdef name="stringutil" classname="ise.antelope.tasks.StringUtilTask">
			<classpath>
				<pathelement location="${build.project.savelocation}/build/antext/AntelopeTasks_3.5.1.jar" />
			</classpath>
		</taskdef>

		<taskdef name="fetchLibrary" classname="com.ebay.tools.build.LibraryTask">
			<classpath>
				<pathelement location="${build.project.savelocation}/build/antext/fetchLibraryAnt.jar" />
				<pathelement location="${build.project.savelocation}/build/antext/eBayBuild.jar" />
			</classpath>
		</taskdef>



		<stringutil string="${clearcase.view.root}" property="lastSlash">
			<lastindexof string="/" />
		</stringutil>


		<stringutil string="${clearcase.view.root}" property="test_fmk_env_view_root">
			<substring beginindex="0" endindex="${lastSlash}" />
		</stringutil>

		<stringutil string="${clearcase.view.root}" property="test_fmk_env_view_name">
			<substring beginindex="${lastSlash}" />
			<replace regex="/" replacement="" />
		</stringutil>

		<echo>TEST FRAMEWORK VIEW ROOT is ${test_fmk_env_view_root}</echo>
		<echo>TEST FRAMEWORK VIEW NAME is ${test_fmk_env_view_name}</echo>

	</target>


	<target name="setUpNewEnv">
		<delete dir="${buildDirectory}" includeemptydirs="true" quiet="true" />
		<mkdir dir="${buildDirectory}" />
		<mkdir dir="${buildDirectory}/plugins" />
		<mkdir dir="${buildDirectory}/features" />

		<delete dir="${eclipse.test.home}" includeemptydirs="true" quiet="true" />
		<mkdir dir="${eclipse.test.home}" />

	</target>



	<!-- ===================================================================== -->
	<!-- main entry point to setup, fetch, generate, build etc. Use -->
	<!-- the customTargets.xml to modify the build behaviour. -->
	<!-- ===================================================================== -->

	<!-- ******* add in the descriptions for each of the top level targets to teh target decl -->
	<target name="main" description="the main build target" depends="init,setUpNewEnv">


		<!-- ===================================================================== -->
		<!-- generate label.properties -->
		<!-- ===================================================================== -->

		<antcall target="create.label.properties" />
		<property file="${buildDirectory}/label.properties" />

		<!-- ===================================================================== -->
		<!-- Global properties.  See the build.properties for information on -->
		<!-- the properties which callers can control. -->
		<!-- ===================================================================== -->
		<property name="buildProperties" location="${builder}/build.properties" />
		<property file="${buildProperties}" />

		<!--suffix added to report name to identify which platform tests results come from-->
		<property name="platform" value="${baseos}.${basews}.${basearch}" />

		<antcall target="preBuild" />
		<antcall target="generate" />
		<antcall target="process" />
		<antcall target="assemble" />
		<antcall target="postBuild" />
		<antcall target="discardBuild">
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before starting the build.  Typical setup includes -->
	<!-- fetching the map files and building the directory.  -->
	<!-- ===================================================================== -->


	<target name="preBuild">
		<ant antfile="${customTargets}" target="preSetup" />
		<ant antfile="${customTargets}" target="postSetup" />
	</target>


	<!-- ===================================================================== -->
	<!-- Generate the build scripts for each element identified in the customTargets -->
	<!-- ===================================================================== -->
	<target name="generate">
		<ant antfile="${customTargets}" target="preGenerate" />
		<!-- Generate the build.xml for each build element-->
		<ant antfile="${customTargets}" target="allElements">
			<property name="target" value="generateScript" />
		</ant>
		<ant antfile="${customTargets}" target="postGenerate" />
	</target>

	<!-- ===================================================================== -->
	<!-- Run the build scripts for each element identified in the customTargets -->
	<!-- ===================================================================== -->
	<target name="process">
		<!-- Run custom tasks before processing, i.e. creating source build zip files -->
		<ant antfile="${customTargets}" target="preProcess" />

		<!-- Process all of the build elements-->
		<ant antfile="${customTargets}" target="allElements">
			<property name="target" value="processElement" />
		</ant>

		<!-- Run custom tasks after compiling, i.e. reporting compile errors -->
		<ant antfile="${customTargets}" target="postProcess" />
	</target>

	<!-- ===================================================================== -->
	<!-- Assemble the build elements into final distributions -->
	<!-- ===================================================================== -->
	<target name="assemble">
		<ant antfile="${customTargets}" target="preAssemble" />
		<ant antfile="${customTargets}" target="allElements">
			<property name="target" value="assembleElement" />
		</ant>
		<ant antfile="${customTargets}" target="postAssemble" />
	</target>

	<!-- ===================================================================== -->
	<!-- Do any steps required after the build (e.g., posting, testing, ...) -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<ant antfile="${customTargets}" target="postBuild" />
	</target>


	<!-- ===================================================================== -->
	<!-- Clean the build elements.  This target is here as an entry -->
	<!-- point to the customTargets.  It is not called directly in the normal -->
	<!-- course of events. -->
	<!-- ===================================================================== -->
	<target name="clean">
		<ant antfile="${customTargets}" target="allElements">
			<property name="target" value="cleanElement" />
		</ant>
	</target>


	<target name="setup" unless="noclean">
		<delete dir="${install}" />
		<mkdir dir="${install}" />

		<!--
		
		this step takes about 10 more mins. Use create link could save a lot of time.
		<echo message="expanding eclipse archive, could take a sec, please wait...">
		</echo>
		<exec dir="${eclipse.test.home}" executable="unzip">
			<arg line="-o -qq ${ECLIPSE_TEST_SDK_ARCHIVE} -d ${install}" />
		</exec>

   -->
		<echo message="expanding ${ECLIPSE_TEST_FRAMEWORK_ARCHIVE}, could take a sec, please wait..." />

		<exec dir="${eclipse.test.home}" executable="unzip">
			<arg line="-o -qq ${ECLIPSE_TEST_FRAMEWORK_ARCHIVE}			
							eclipse/plugins/org.eclipse.test_*/*
							eclipse/plugins/org.eclipse.test.performance_*
							eclipse/plugins/org.eclipse.test.performance.win32_*
							eclipse/plugins/org.eclipse.ant.optional.junit_*
							-x eclipse/plugins/*.source*/**
							-d ${install}" />


		</exec>

		<echo message="expanding assembled features archive, could take a sec, please wait...">
		</echo>
		<exec dir="${eclipse.test.home}" executable="unzip">
			<arg line="-o -qq ${eclipse.test.home}/${component}-*-${buildId}.zip -d ${install}" />
		</exec>


		<echo message="creating link..." />
		<pathconvert property="install.converted" dirsep="/">
			<path location="${install}" />
		</pathconvert>
		<echo file="${ede.eclipse.home}/links/test_${component}.link" append="false" >path=${install.converted}</echo>
	</target>


	<target name="junit">
		<property name="derby" value="" />
		<mkdir dir="${results}/xml" />
		<mkdir dir="${results}/html" />

		<antcall target="setup" />
		<ant antfile="${eclipse-home}/plugins/${testPlugin}/test.xml" dir="${eclipse-home}" />
		<copy file="${eclipse-home}/${report}.xml" tofile="${results}/xml/${report}_${platform}.xml" failonerror="false" />
		<antcall target="genHtml" />
		<antcall target="genCoverage" />

		<delete file="${ede.eclipse.home}/links/test_${component}.link" />
	</target>

	<target name="performance" if="performance.target.present">
		<property name="derby" value="eclipse/plugins/Cloudscape*/* " />
		<antcall target="setup" />
		<ant antfile="${eclipse-home}/plugins/${testPlugin}/test.xml" dir="${eclipse-home}" target="performance" />
		<copy file="${eclipse-home}/${report}.xml" tofile="${results}/xml/${report}.xml" failonerror="false" />
		<antcall target="genHtml" />
		<antcall target="genCoverage" />
	</target>

	<target name="runtests" unless="skip.test">
		<condition property="performance.target.present" value="true">
			<isset property="${testPlugin}.has.performance.target" />
		</condition>
		<property name="${testPlugin}.prerequisites" value="" />
		<property name="os" value="${baseos}" />
		<property name="ws" value="${basews}" />
		<property name="arch" value="${basearch}" />
		<!--override the value of this property with performance if the tests run on performance machine-->
		<antcall target="junit" />
	</target>

	<target name="genCoverage">
		<emma enabled="${emma.enabled}">
			<report>
				<!-- collect all EMMA data dumps (metadata and runtime)
		             [this can be done via nested <fileset> fileset elements
		             or <file> elements pointing to a single file]:
		        -->
				<fileset dir="${coverage.dir}">
					<include name="*.emma" />
				</fileset>

				<!-- for every type of report desired, configure a nested
		             element; various report parameters
		             can be inherited from the parent <report>
		             and individually overridden for each report type:
		        -->
				<txt outfile="${coverage.dir}/coverage.txt" />
				<xml outfile="${coverage.dir}/coverage.xml" />
				<html outfile="${coverage.dir}/coverage.html" />
			</report>
		</emma>
	</target>

	<target name="genHtml" description="Generates HTML results with provided JUNIT.XSL provided">
		<style style="${JUnit-XSL}" basedir="${results}/xml" destdir="${results}/html" />
	</target>


	<target name="discardBuild" if="${env.discardBuildDataAfterFinish}">
		<!--delete test folder-->

		<delete dir="${eclipse.test.home}" />
		<!--delete src folder-->

		<delete dir="${buildDirectory}" />
	</target>

	<target name="create.label.properties">
		<tstamp />
		<property name="date" value="${DSTAMP}" />
		<property name="time" value="${TSTAMP}" />
		<property name="timestamp" value="${date}${time}" />
		<property name="buildType" value="I" />
		<property name="buildId" value="${buildType}${date}" />

		<!--this naming convention used by php scripts on download server-->
		<property name="buildLabel" value="${buildType}-${buildId}-${timestamp}" />

		<!--store the build label information in a file-->
		<echo file="${buildDirectory}/label.properties" append="true">
				buildType=${buildType}
				</echo>
		<echo file="${buildDirectory}/label.properties" append="true">
				buildId=${buildId}
				</echo>
		<echo file="${buildDirectory}/label.properties" append="true">
				timestamp=${timestamp}
				</echo>
		<echo file="${buildDirectory}/label.properties" append="true">
				buildLabel=${buildLabel}
				</echo>
	</target>


	<target name="copy.emma.jar" description="copy emma jar to jre ext" unless="emma.jar.exists">
		<echo message="java home is at: ${java.home}, trying to copy emma jar to ${java.home}\lib\ext" />
		<copy todir="${java.home}\lib\ext" failonerror="true">
			<fileset dir="${emma.home}">
				<include name="emma.jar" />
			</fileset>
		</copy>

	</target>


	<target name="copyLibraryJars">
		<!--TODO unfinished-->
		<!-- copy build scripts -->
		<property name="configProperties" location="${buildConfigSavePath}/config.properties" />
		<property file="${configProperties}" />
		<echo>copy jars for project: ${projectNames}</echo>
		<for list="${projectNames}" param="aproj">
			<sequential>
				<fetchLibrary viewroot="${clearcase.view.root.converted}">
					<library libraryName="${@{aproj}.libraryNames}" resolveDependency="${@{aproj}.resolveDependency}" dstDir="${@{aproj}.lib.location}" includes="${@{aproj}.includes}" excludes="${@{aproj}.excludes}" />
				</fetchLibrary>
			</sequential>
		</for>



		<!-- hard coded path, generated
			
			<copy todir="${contentEditorLib}" failonerror="true" overwrite="true">
				<fileset file="${clearcase.view.root}\v3jars\v4\DsfContentBootstrap\4.0.0\java50\DsfContentBootstrap.jar" />
				<fileset file="${clearcase.view.root}\v3jars\v4\DsfBase\2.1.0\java50\DsfBase.jar" />
				<fileset file="${clearcase.view.root}\v3jars\v4\Dsf\3.1.0\java50\DsfAll.jar" />
				<fileset file="${clearcase.view.root}\v3jars\v4\EbayResOpEnv\1.0.0\java50\EbayResOpEnv.jar" />
				<fileset file="${clearcase.view.root}\v3jars\Houston\uKernelCore\1.19.1\java50\uKernelCore.jar" />
				<fileset file="${clearcase.view.root}\v3jars\Houston\uKernel\1.18.1\java50\uKernel.jar" />
			</copy>
		

	-->


	</target>

	<!--targets for outter call-->

	<target name="preLaunchEclipse">
		<!--add anything you needed here, they will be executed  before -->

	</target>

	<target name="launchEclipse" description="build and test a component" depends="initFromEnv">
		<property name="component.build.name" value="${component}Build" />
		<property name="component.build.dir" value="${env.TEST_HOME}" />
		<property name="test.workspace" value="${root.home}/${component.build.name}/workspace" />

		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${test.workspace}" />
		</delete>

		<condition property="env.cmd" value="env-java5-ibm.cmd">
			<available file="${ede.eclipse.home}\..\env-java5-ibm.cmd" />
		</condition>

		<condition property="env.cmd" value="env-java6-ibm.cmd" else="env-java.cmd">
			<available file="${ede.eclipse.home}\..\env-java6-ibm.cmd" />
		</condition>


		<exec dir="${ede.eclipse.home}\..\" executable="cmd">
			<arg value="/c" />
			<arg value="${env.cmd}" />
		</exec>


		<antcall target="preLaunchEclipse" />

		<exec dir="${env.JAVA_HOME}\bin" executable="java">
			<arg line="-Xmx1536m -cp ${ede.eclipse.home}\plugins\org.eclipse.equinox.launcher_1.0.1.R33x_v20080118.jar org.eclipse.core.launcher.Main  -data ${test.workspace} -application org.eclipse.ant.core.antRunner -buildfile ${component.build.dir}\build.xml main  -Dcomponent=${component} -Dconfigs='*,*,*' -Dbaseos=win32 -Dbasews=win32 -Dbasearch=x86  -Dpde.build.scripts=${ede.eclipse.home}\plugins\org.eclipse.pde.build_3.3.2.v20071019\scripts -DbaseLocation=${ede.eclipse.home}" />

			<!--the below env value are from start.bat-->
			<env key="root.home" value="${root.home}" />
			<env key="component.name" value="${component}" />
			<env key="eclipse.testframework.version" value="${eclipse.testframework.version}" />
			<env key="emma.enabled" value="${emma.enabled}" />
			<env key="findbugs.enabled" value="${findbugs.enabled}" />
			<env key="javacfailonerror" value="${javacfailonerror}" />

		</exec>
	</target>


</project>
