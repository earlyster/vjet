/*
 * css2.jj
 *
 * Modified from Open-Source CSS Parser (Steady State Software) under
 * GNU Lesser General Public License.
 * 
 */

options {
    IGNORE_CASE = true;
    STATIC = false;
//    UNICODE_INPUT = false;
    USER_CHAR_STREAM = true;
//    DEBUG_TOKEN_MANAGER = true;
//    DEBUG_PARSER = true;
}

PARSER_BEGIN(SacParser)

package com.ebay.dsf.css.parser;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import com.ebay.dsf.css.parser.selectors.DConditionFactory;
import com.ebay.dsf.css.parser.selectors.DSelectorFactory;
import com.ebay.dsf.css.sac.CssException;
import com.ebay.dsf.css.sac.CssParseException;
import com.ebay.dsf.css.sac.ICondition;
import com.ebay.dsf.css.sac.IConditionFactory;
import com.ebay.dsf.css.sac.IDocumentHandler;
import com.ebay.dsf.css.sac.IErrorHandler;
import com.ebay.dsf.css.sac.InputSource;
import com.ebay.dsf.css.sac.ILexicalUnit;
import com.ebay.dsf.css.sac.ILocator;
import com.ebay.dsf.css.sac.IParser;
import com.ebay.dsf.css.sac.ISelector;
import com.ebay.dsf.css.sac.ISelectorFactory;
import com.ebay.dsf.css.sac.ISelectorList;
import com.ebay.dsf.css.sac.ISimpleSelector;
import com.ebay.kernel.util.RopeBuffer;

// TODO: after parser code generation, do these items (these cannot be done in the .jj grammar file):
// - clean up warnings in SacParserTokenManager
// - comment out this line:
//   private boolean jj_semLA;
// - change this line:
//   private java.util.Vector jj_expentries = new java.util.Vector();
// to this:
//   private List<int[]> jj_expentries = new ArrayList<int[]>();
// - and in the jj_add_error_token(int, int) method, change this:
//   for(java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
//     int[] oldentry = (int[])(enum.nextElement());
// to this:
//   for(int[] oldentry : jj_expentries) {
// - and this:
//   jj_expentries.addElement(jj_expentry);
// to this:
//   jj_expentries.add(jj_expentry);
// - and in the generateParseException() method, change this:
//   jj_expentries.removeAllElements();
// to this:
//   jj_expentries.clear();
// - and this:
//   jj_expentries.addElement(jj_expentry);
// to this:
//   jj_expentries.add(jj_expentry);
// - and this:
//   exptokseq[i] = (int[])jj_expentries.elementAt(i);
// to this:
//   exptokseq[i] = jj_expentries.get(i);
// - delete this TODO item

public class SacParser implements IParser {
    private InputSource m_source = null;
//    private Locale m_locale = null;
    private IDocumentHandler m_docHandler = null;
//    private DErrorHandler m_errHandler = null;
    private ISelectorFactory m_selectorFactory = new DSelectorFactory();
    private IConditionFactory m_conditionFactory = new DConditionFactory();
    private boolean m_quiet = true;
    private RopeBuffer m_errorMessage = new RopeBuffer();

    public SacParser() {
        this((CharStream) null);
    }

    public void setLocale(Locale locale) throws CssException {
//        m_locale = locale;
        // TODO: Search for requested locale
//        throw new DCssException(DCssException.SAC_NOT_SUPPORTED_ERR);
    }

    public void setDocumentHandler(IDocumentHandler handler) {
        m_docHandler = handler;
    }

    public void setSelectorFactory(ISelectorFactory selectorFactory) {
        m_selectorFactory = selectorFactory;
    }

    public void setConditionFactory(IConditionFactory conditionFactory) {
        m_conditionFactory = conditionFactory;
    }
    
    public void setErrorHandler(IErrorHandler handler) {
//        m_errHandler = handler;
    }
    
    public void parseStyleSheet(InputSource source) throws CssException, IOException {
        m_source = source;
        ReInit(getCharStream(source));
        try {
            styleSheet();
            assertError();
        } catch (ParseException e) {
            throw new CssException(CssException.SAC_SYNTAX_ERR, e.getMessage(), e);
        }
    }
    
    public void parseStyleSheet(String uri) throws CssException, IOException {
        parseStyleSheet(new InputSource(uri));
    }

    public void parseStyleDeclaration(InputSource source) throws CssException, IOException {
        m_source = source;
        ReInit(getCharStream(source));
        try {
            styleDeclaration();
            assertError();
        } catch (ParseException e) {
            throw new CssException(CssException.SAC_SYNTAX_ERR, e.getMessage(), e);
        }
    }

    public void parseRule(InputSource source) throws CssException, IOException {
        m_source = source;
        ReInit(getCharStream(source));
        try {
            styleSheetRuleSingle();
            assertError();
        } catch (ParseException e) {
            throw new CssException(CssException.SAC_SYNTAX_ERR, e.getMessage(), e);
        }
    }

    public String getParserVersion() {
        return "http://www.w3.org/TR/REC-CSS2";
    }
    
    public ISelectorList parseSelectors(InputSource source)
            throws CssException, IOException {
        m_source = source;
        ReInit(getCharStream(source));
        ISelectorList sl = null;
        try {
            sl = selectorList();
        } catch (ParseException e) {
            throw new CssException(CssException.SAC_SYNTAX_ERR, e.getMessage(), e);
        }
        return sl;
    }

    public ILexicalUnit parsePropertyValue(InputSource source)
            throws CssException, IOException {
        m_source = source;
        ReInit(getCharStream(source));
        ILexicalUnit lu = null;
        try {
            lu = expr();
        } catch (ParseException e) {
            throw new CssException(CssException.SAC_SYNTAX_ERR, e.getMessage(), e);
        }
        return lu;
    }

    public boolean parsePriority(InputSource source)
            throws CssException, IOException {
        m_source = source;
        ReInit(getCharStream(source));
        boolean b = false;
        try {
            b = prio();
        } catch (ParseException e) {
            throw new CssException(CssException.SAC_SYNTAX_ERR, e.getMessage(), e);
        }
        return b;
    }
    
    private void assertError() throws CssException{
        if (m_errorMessage.length() != 0) {
            String errorMsg = m_errorMessage.toString();
            m_errorMessage.clear();
            throw new CssException(CssException.SAC_SYNTAX_ERR, errorMsg, null);
        }
    }

    private CharStream getCharStream(InputSource source)
            throws CssException, IOException {
        if (source.getCharacterStream() != null) {
            return new ASCII_CharStream(source.getCharacterStream(), 1, 1);
        } else {

            // TODO: Handle other sources
            return null;
        }
    }

    private ILocator getLocator() {
        return null;
    }
}

PARSER_END(SacParser)

TOKEN_MGR_DECLS :
{
    private boolean m_quiet = true;
/*
    private int getLastNumPos(StringBuffer sb) {
    int i;
    for( i = 0; i < sb.length(); i++ )
        if( Character.isLetter( sb.charAt( i ) ) )
        break;
    return i - 1;
    }
*/
    private String trimBy(StringBuffer s, int left, int right) {
    int end = s.length();
    return s.toString().substring(left, end-right);
    }

    private String trimUrl(StringBuffer s) {
    StringBuffer s1 = new StringBuffer( trimBy(s, 4, 1).trim() );
    int end = s1.length() - 1;
    if ((s1.charAt(0) == '"' && s1.charAt(end) == '"')
        || (s1.charAt(0) == '\'' && s1.charAt(end) == '\''))
        return trimBy(s1, 1, 1);
    else
        return s1.toString();
    }
}

<DEFAULT> TOKEN : {
    < S: ( " "|"\t"|"\r"|"\n"|"\f" )+ >
}

<DEFAULT> MORE : {
    < "/*" > : COMMENT
}

<COMMENT> SKIP : {
    < "*/" > : DEFAULT
}

<COMMENT> MORE : {
    < ~[] > : COMMENT
}

<DEFAULT> TOKEN : {
  < LBRACE: "{" >
| < RBRACE: "}" >
| < COMMA: "," >
| < DOT: "." >
| < SEMICOLON: ";" >
| < COLON: ":" >
| < ASTERISK: "*" >
| < SLASH: "/" >
| < PLUS: "+" >
| < MINUS: "-" >
| < UNDERBAR: "_" >
| < EQUALS: "=" >
| < GT: ">" >
| < LSQUARE: "[" >
| < RSQUARE: "]" >
| < TILDE: "~" >
| < VERTICAL: "|" >
}

<DEFAULT> TOKEN : {
    < HASH: "#" <NAME> >
}

<DEFAULT> TOKEN : {
    < STRING: <STRING1> | <STRING2> > { matchedToken.image = trimBy(image, 1, 1); }
| < RROUND: ")" >
}

<DEFAULT> TOKEN : {
    < #URL: ["!","#","$","%","&","*"-"~"] | <NONASCII> | <ESCAPE> >
| < URI: "url(" ( <S> )* ( <STRING> | ( <URL> )* ) ( <S> )* <RROUND> > { matchedToken.image = trimUrl(image); }
}

<DEFAULT> TOKEN : {
  < CDO: "<!--" >
| < CDC: "-->" >
| < INCLUDES: "~=" >
| < DASHMATCH: "|=" >
| < STARTS_WITH: "^=" >
| < ENDS_WITH: "$=" >
| < CONTAINS_AT_LEAST_ONE: "*=" >
| < IMPORT_SYM: "@import" >
| < PAGE_SYM: "@page" >
| < MEDIA_SYM: "@media" >
| < WEBKIT_KEYFRAMES_SYM: "@-webkit-keyframes" >
| < FONT_FACE_SYM: "@font-face" >
| < CHARSET_SYM: "@charset" >
| < NAMESPACE_SYM: "@namespace" >
| < ATKEYWORD: "@" <IDENT> >
| < IMPORTANT_SYM: "!" ( <S> )? "important" >
| < INHERIT: "inherit" >
| < EMS: <NUM> "em" > { matchedToken.image = trimBy(image, 0, 2); }
| < EXS: <NUM> "ex" > { matchedToken.image = trimBy(image, 0, 2); }
| < LENGTH_PX: <NUM> "px" > { matchedToken.image = trimBy(image, 0, 2); }
| < LENGTH_CM: <NUM> "cm" > { matchedToken.image = trimBy(image, 0, 2); }
| < LENGTH_MM: <NUM> "mm" > { matchedToken.image = trimBy(image, 0, 2); }
| < LENGTH_IN: <NUM> "in" > { matchedToken.image = trimBy(image, 0, 2); }
| < LENGTH_PT: <NUM> "pt" > { matchedToken.image = trimBy(image, 0, 2); }
| < LENGTH_PC: <NUM> "pc" > { matchedToken.image = trimBy(image, 0, 2); }
| < ANGLE_DEG: <NUM> "deg" > { matchedToken.image = trimBy(image, 0, 3); }
| < ANGLE_RAD: <NUM> "rad" > { matchedToken.image = trimBy(image, 0, 3); }
| < ANGLE_GRAD: <NUM> "grad" > { matchedToken.image = trimBy(image, 0, 4); }
| < TIME_MS: <NUM> "ms" > { matchedToken.image = trimBy(image, 0, 2); }
| < TIME_S: <NUM> "s" > { matchedToken.image = trimBy(image, 0, 1); }
| < FREQ_HZ: <NUM> "Hz" > { matchedToken.image = trimBy(image, 0, 2); }
| < FREQ_KHZ: <NUM> "kHz" > { matchedToken.image = trimBy(image, 0, 3); }
| < DIMEN: <NUM> <IDENT> >
| < PERCENTAGE: <NUM> "%" > { matchedToken.image = trimBy(image, 0, 1); }
| < NUMBER: <NUM> >
| < RGB: "rgb(" >
| < RGBA: "rgba(" >
| < HSL: "hsl(" >
| < HSLA: "hsla(" >

| < IDENT: <NMSTART> ( <NMCHAR> )* >
| < MINUS_UNDERBAR_COMBO: <MINUS> | <MINUS> <UNDERBAR> (<MINUS> | <UNDERBAR>)* | <UNDERBAR> (<MINUS> | <UNDERBAR>)* >
| < EXTENDED_IDENT: <MINUS_UNDERBAR_COMBO> ["a"-"z"] (<NMCHAR>)* >
| < NAMESPACE_IDENT: <IDENT> (<S>)? <VERTICAL> (<S>)? <IDENT> >
| < EMPTY_NAMESPACE_IDENT: <VERTICAL> <IDENT> >
| < STAR_NAMESPACE_IDENT: <ASTERISK> <VERTICAL> <IDENT> >
| < NAMESPACE_STAR: <IDENT> <VERTICAL> <ASTERISK> >
| < FUNCTION: <IDENT> "(" >
| < EXTENDED_IDENT_FUNCTION: <EXTENDED_IDENT> "(" >
| < #NAME: ( <NMCHAR> )+ >
| < NUM: ( ["0"-"9"] )+ | ( ["0"-"9"] )* "." ( ["0"-"9"] )+ >

| < UNICODERANGE: "U+" ( <RANGE> | ( <HNUM> "-" <HNUM> ) ) >
| < #RANGE: <Q16> | <H> ( (<Q15>)? | <H> ( (<Q14>)? | <H> ( (<Q13>)? | <H> ( (<Q12>)? | <H> ( (<Q11>)? | <H> ) ) ) ) ) >
| < #Q16: "?" | "??" | "???" | "????" | "?????" | "??????" >
| < #Q15: "?" | "??" | "???" | "????" | "?????" >
| < #Q14: "?" | "??" | "???" | "????" >
| < #Q13: "?" | "??" | "???" >
| < #Q12: "?" | "??" >
| < #Q11: "?" >

| < #PNMSTART: ["a"-"z", "-"] | <NONASCII> | <ESCAPE> >
| < #NMSTART: ["a"-"z"] | <NONASCII> | <ESCAPE> >
| < #NMCHAR: ["a"-"z","0"-"9","-","_"] | <NONASCII> | <ESCAPE> >
| < #STRING1: "\"" ( ["\t"," ","!","#","$","%","&","("-"~"] | "\\" <NL> | "\'" | <NONASCII> | <ESCAPE> )* "\"" >
| < #STRING2: "\'" ( ["\t"," ","!","#","$","%","&","("-"~"] | "\\" <NL> | "\"" | <NONASCII> | <ESCAPE> )* "\'" >
| < #NONASCII: ["\u0080"-"\uFFFF"] >
| < #ESCAPE: <UNICODE> | ( "\\" [" "-"~","\u0080"-"\uFFFF"] ) >
| < #NL: "\n" | "\r\n" | "\r" | "\f" >
| < #UNICODE: "\\" <HNUM> ( " " | "\t" | "\r" | "\n" | "\f" )? >
| < #HNUM: <H> | <H><H> | <H><H><H> | <H><H><H><H> | <H><H><H><H><H> | <H><H><H><H><H><H> >
| < #H: ["0"-"9","a"-"f"] >
}

<*> TOKEN: {
    < UNKNOWN: ~[] >
    {
        if (!m_quiet) {
            System.err.println("Illegal character : " + image.toString());
        }
    }
}

// stylesheet
//    : [ CHARSET_SYM S* STRING S* ';' ]?
//        [S|CDO|CDC]* [ import [S|CDO|CDC]* ]*
//        [ [ ruleset | media | keyframes | page | font_face ] [S|CDO|CDC]* ]*
//    ;
//
void styleSheet() : { }
{
    try {
        { m_docHandler.startDocument(m_source); }
        styleSheetRuleList()
        <EOF>
    } finally {
        m_docHandler.endDocument(m_source);
    }
}

void styleSheetRuleList() : { }
{
    ( charsetRule() )?
    ( <S> | <CDO> | <CDC> )*
    ( importRule() ( <S> | <CDO> | <CDC> )* )*
    ( namespaceRule() )*
    ( ( styleRule() | mediaRule() | keyframesRule() | pageRule() | fontFaceRule() | unknownRule() ) ( <S> | <CDO> | <CDC> )* )*
}

//
// This is used by ASTStyleSheet.insertRule to parse a single rule
//
void styleSheetRuleSingle() : { }
{
    ( charsetRule() | importRule() | namespaceRule() | styleRule() | mediaRule() | keyframesRule() | pageRule() | fontFaceRule() | unknownRule() )
}

void charsetRule() : { }
{
    <CHARSET_SYM> ( <S> )*
    <STRING> ( <S> )*
    <SEMICOLON>
}

// namespace
//   : NAMESPACE_SYM S* [namespace_prefix S*]? [STRING|URI] S* ';' S* ;
// namespace_prefix
//   : IDENT ;
void namespaceRule() : { }
{
    <NAMESPACE_SYM> ( <S> )*
	(<IDENT> )?
	<STRING> (<S>)* 
	<SEMICOLON>
}

void unknownRule() : {
    String s;
}
{
    <ATKEYWORD>
    {
        s = skip();
        m_docHandler.ignorableAtRule(s);
    }
}

// import
//     : IMPORT_SYM S*
//     [STRING|URI] S* [ medium [ ',' S* medium]* ]? ';' S*
//     ;
//
void importRule() : {
    Token t;
    DSacMediaList ml = new DSacMediaList();
}
{
    <IMPORT_SYM> ( <S> )*
    ( t = <STRING>
    | t = <URI> ) ( <S> )*
    ( mediaList(ml) )?
    <SEMICOLON> {
        m_docHandler.importStyle(unescape(t.image), ml, null);
    }
}

void keyframesName() : {

}
{
	<IDENT>
	|
	<STRING>
}

// keyframes
//
void keyframesRule() : { }
{
	<WEBKIT_KEYFRAMES_SYM> (<S>)* 
	keyframesName() {
	
	}
	(<S>)*
	<LBRACE> (<S>)*
    keyframesBlocks()
    <RBRACE>
}
void keyframesBlocks() : { }
{
	(keyframesBlock() (<S>)* ) *
}

void keyframesBlock() : { }
{
	keyframesSelector() 
    <LBRACE> ( <S> )*
    {
        //start = true;
        //m_docHandler.startSelector(null) ; //selList);
    }
    ( kfdeclaration() )?
    ( <SEMICOLON> ( <S> )* ( kfdeclaration() )? )*
    <RBRACE>
}

String toOrFrom() : {
    Token t;
}
{
    t = <IDENT> { 
			String id = t.image; 
			if ("to".equals(id) || "from".equals(id)) return id ;
			throw new CssException(CssException.SAC_SYNTAX_ERR, "expected 'to' or 'from'", null);
    }
}
	
void keyframesSelector() : { }
{
	(toOrFrom() | <PERCENTAGE>) ( <S> )*
}

void kfdeclaration() : { }
{
    /* p = */ property()
    <COLON> ( <S> )*
    /* e = */ expr()
    ( prio() )?
    {
        // m_docHandler.property(p, e, priority);
    }
}

// media
//     : MEDIA_SYM S* medium [ ',' S* medium ]* '{' S* ruleset* '}' S*
//     ;
//
void mediaRule() : {
    boolean start = false;
    DSacMediaList ml = new DSacMediaList();
}
{
    try {
        <MEDIA_SYM> ( <S> )*
        mediaList(ml)
        {
            start = true;
            m_docHandler.startMedia(ml);
        }
        <LBRACE> ( <S> )*
        ( mediaRuleList() )?
        <RBRACE>
    } finally {
        if (start) {
            m_docHandler.endMedia(ml);
        }
    }
}

void mediaList(DSacMediaList ml) : {
    String s;
}
{
    s = medium()
    ( <COMMA> ( <S> )* { ml.add(s); } s = medium() )*
    { ml.add(s); }
}

void mediaRuleList() : { }
{
    ( ( styleRule() | pageRule() | unknownRule() ) ( <S> )* )+ 
}

void mediaRuleSingle() : { }
{
    ( styleRule() | pageRule() | unknownRule() )
}

// medium
//     : IDENT S*
//     ;
//
String medium() : {
    Token t;
}
{
    t = <IDENT> ( <S> )* { return t.image; }
}

// page
//     : PAGE_SYM S* IDENT? pseudo_page? S*
//     '{' S* declaration [ ';' S* declaration ]* '}' S*
//     ;
//
void pageRule() : {
    Token t = null;
    String s = null;
    boolean start = false;
}
{
    try {
        <PAGE_SYM> ( <S> )*

        ( LOOKAHEAD(2) ( t = <IDENT> ( <S> )* ) |
        ( t = <IDENT> s = pseudoPage() ( <S> )* ) |
        ( s = pseudoPage() ( <S> )* ) )?

        //    ( t = <IDENT> { jjtThis.setIdent( t.image ); } )?
        //    ( s = pseudoPage() { jjtThis.setPseudoPage( s ); } )? ( <S> )*

        <LBRACE> ( <S> )*
        {
            start = true;
            m_docHandler.startPage((t != null) ? unescape(t.image) : null, s);
        }

        ( declaration() )?
        ( <SEMICOLON> ( <S> )* ( declaration() )? )*
        <RBRACE>
    } finally {
        if (start) {
            m_docHandler.endPage((t != null) ? unescape(t.image) : null, s);
        }
    }
}

// pseudoPage
//     : ':' IDENT
//     ;
//
String pseudoPage() : {
    Token t;
}
{
    <COLON> t = <IDENT> { return t.image; }
}

// font_face
//     : FONT_FACE_SYM S*
//     '{' S* declaration [ ';' S* declaration ]* '}' S*
//     ;
//
void fontFaceRule() : {
    boolean start = false;
}
{
    try {
        <FONT_FACE_SYM> ( <S> )*
        <LBRACE> ( <S> )* { start = true; m_docHandler.startFontFace(); }
        ( declaration() )?
        ( <SEMICOLON> ( <S> )* ( declaration() )? )*
        <RBRACE>
    } finally {
        if (start) {
            m_docHandler.endFontFace();
        }
    }
}

// operator
//     : '/' S* | ',' S* |
//     ;
//
ILexicalUnit operator(ILexicalUnit prev) : { }
{
    <SLASH> ( <S> )*     { return new DLexicalUnit(prev, ILexicalUnit.SAC_OPERATOR_SLASH); }
    | <COMMA> ( <S> )* { return new DLexicalUnit(prev, ILexicalUnit.SAC_OPERATOR_COMMA); }
}

// combinator
//     : '+' S* | '>' S* |
//     ;
//
char combinator() : {
    char c = ' ';
}
{
    ( <PLUS> { c='+'; } ( <S> )*
    | <GT> { c='>'; } ( <S> )*
    | <TILDE> { c='~'; } ( <S> )*
    | <S> ( ( <PLUS> { c='+'; } | <GT> { c='>'; } | <TILDE> { c='~'; } ) ( <S> )* )? )

    { return c; }
}

// unary_operator
//     : '-' | '+'
//     ;
//
char unaryOperator() : { }
{
    ( <MINUS> { return '-'; } | <PLUS> { return '+'; } )
}

// property
//     : IDENT S*
//     ;
//
String property() : {
    Token t;
}
{
	t = <IDENT> ( <S> )*
    { return unescape(t.image); }
|
    t = <EXTENDED_IDENT> ( <S> )* 
    { return unescape(t.image); }
}

// ruleset
//     : selector [ ',' S* selector ]*
//     '{' S* declaration [ ';' S* declaration ]* '}' S*
//     ;
//
void styleRule() : {
    ISelectorList selList = null;
    boolean start = false;
}
{
    try {
        selList = selectorList()
        <LBRACE> ( <S> )*
        {
            start = true;
            m_docHandler.startSelector(selList);
        }
        ( declaration() )?
        ( <SEMICOLON> ( <S> )* ( declaration() )? )*
        <RBRACE>
    } catch(ParseException e) {
        m_errorMessage.append("Exception in styleRule: ").append(e.getMessage()).append("\n");
        error_skipblock();
    } finally {
        if (start) {
            m_docHandler.endSelector(selList);
        }
    }
}

ISelectorList selectorList() : {
    DSelectorList selList = new DSelectorList();
    ISelector sel;
}
{
    try {
        sel = selector()
        ( <COMMA> ( <S> )* { selList.add(sel); } sel = selector() )*

        {
            selList.add(sel);
            return selList;
        }
    } catch (ParseException e) {
        m_errorMessage.append("Exception in selectorList: ").append(e.getMessage()).append("\n");
    }
}

// selector
//     : simple_selector [ combinator simple_selector ]*
//     ;
//
ISelector selector() : {
    ISelector sel;
    char comb;
}
{
    try {
        sel = simpleSelector(null, ' ')
        ( LOOKAHEAD(2) comb = combinator() sel = simpleSelector(sel, comb) )* ( <S> )*
        {
            return sel;
        }
    } catch (ParseException e) {
        m_errorMessage.append("Exception in selectorList: ").append(e.getMessage()).append("\n");
        skipSelector();
    }
}

// simple_selector
//     : element_name? [ HASH | class | attrib | pseudo ]* S*
//     ;
//
ISelector simpleSelector(ISelector sel, char comb) : {
    ISimpleSelector simpleSel = null;
    ICondition c = null;
}
{
    (
        ( simpleSel = elementName()
            ( c = hash(c)
            | c = _class(c)
            | c = attrib(c)
            | c = pseudo(c)
            )*
        )
        |
        ( { simpleSel = m_selectorFactory.createElementSelector(null, null); }
            ( c = hash(c)
            | c = _class(c)
            | c = attrib(c)
            | c = pseudo(c)
            )+
        )
    )

    {
        if (c != null) {
            simpleSel = m_selectorFactory.createConditionalSelector(simpleSel, c);
        }

        if (sel != null) {
            switch (comb) {
            case ' ':
                sel = m_selectorFactory.createDescendantSelector(sel, simpleSel);
                break;
            case '+':
                sel = m_selectorFactory.createDirectAdjacentSelector(sel.getSelectorType(), sel, simpleSel);
                break;
            case '>':
                sel = m_selectorFactory.createChildSelector(sel, simpleSel);
                break;
            case '~':
                sel = m_selectorFactory.createGeneralSiblingSelector(sel.getSelectorType(), sel, simpleSel);
                break;
            }
        } else {
            sel = simpleSel;
        }

        return sel;
    }
}

// class
//     : '.' IDENT
//     ;
//
ICondition _class(ICondition pred) : {
    Token t;
}
{
    <DOT> t = <IDENT> {
        ICondition c = m_conditionFactory.createClassCondition(null, t.image);
        return (pred == null) ? c : m_conditionFactory.createAndCondition(pred, c);
    }
}

// element_name
//     : IDENT | '*'
//     ;
//
ISimpleSelector elementName() : {
    Token t;
}
{
    t= <IDENT> 
    	{ return m_selectorFactory.createElementSelector(null, unescape(t.image)); }
    | t = <ASTERISK>
    	{ return m_selectorFactory.createElementSelector(null, null); }
    | t = <NAMESPACE_IDENT> 
    	{ return m_selectorFactory.createElementSelector(null, unescape(t.image)); }
    | t = <NAMESPACE_STAR> 
    	{ return m_selectorFactory.createElementSelector(null, unescape(t.image)); }
    | t = <EMPTY_NAMESPACE_IDENT>
        { return m_selectorFactory.createElementSelector(null, unescape(t.image)); }
    | t = <STAR_NAMESPACE_IDENT> 
    	{ return m_selectorFactory.createElementSelector(null, unescape(t.image)); }
}

Token attribIdentifier() : {
    Token t;
}
{
	t = <IDENT>
    { return t; }
|
    t = <EXTENDED_IDENT>
    { return t; }
}

// attrib
//     : '[' S* IDENT S* [ [ EQUALS | INCLUDES | DASHMATCH | STARTS_WITH | ENDS_WITH | CONTAINS_AT_LEAST_ONE ] S*
//     [ IDENT | STRING ] S* ]? ']'
//     ;
//
ICondition attrib(ICondition pred) : {
    Token t;
    String name = null;
    String value = null;
    int type = 0; // E[attr]
}
{
    <LSQUARE> 
    ( <S> )*
    t = attribIdentifier() { name = unescape(t.image); } 
    ( <S> )*
    (
        (
            <EQUALS> { type = 1; } // E[attr="foo"]
            |
            <INCLUDES> { type = 2; }
            |
            <DASHMATCH> { type = 3; }
            |
            <STARTS_WITH> { type = 4; }
            |
            <ENDS_WITH> { type = 5; }
            |
            <CONTAINS_AT_LEAST_ONE> { type = 6; }
        )
        ( <S> )*
        (
            t = <IDENT> { value = t.image; }
            |
            t = <STRING> { value = unescape(t.image); }
        )
        ( <S> )*
    )?
    <RSQUARE>

    {
        ICondition c = null;
        switch (type) {
        case 0: // E[attr]
            c = m_conditionFactory.createAttributeCondition(name, null, false, null);
            break;
        case 1: // E[attr="foo"]
            c = m_conditionFactory.createAttributeCondition(name, null, false, value);
            break;
        case 2: // E[attr ~= "foo"] {color:red}
            c = m_conditionFactory.createOneOfAttributeCondition(name, null, false, value);
            break;
        case 3: // E[foo |= "bar"]
            c = m_conditionFactory.createIsOrStartsWithAttributeCondition(name, null, false, value);
            break;
        case 4: // E[attr ^= "foo"] {color:red}
            c = m_conditionFactory.createStartsWithAttributeCondition(name, null, false, value);
            break;
        case 5: // E[attr $= "foo"] {color:red}
            c = m_conditionFactory.createEndsWithAttributeCondition(name, null, false, value);
            break;
        case 6: // E[attr *= "foo"] {color:red}
            c = m_conditionFactory.createContainsAtLeastOneAttributeCondition(name, null, false, value);
            break;
        }
        return (pred == null) 
        	? c 
        	: m_conditionFactory.createAndCondition(pred, c);
    }
}

// simpleArg
//     : id | integer | "*"
//     ;
//
Token simpleArg() : {
    Token t;
}
{
    t = <IDENT> { return t; }
| 
	t = <NUMBER> { return t; }
| 
	t = <ASTERISK> { return t; }
}

Token pseudoIdentifier() : {
	Token t;
}
{
    t = <IDENT> { return t; }
| 
	t = <EXTENDED_IDENT> { return t; }
}

Token extendedIdentFunction() : {
	Token t;
}
{
    t = <FUNCTION>
    { return t; }
| 
	t = <EXTENDED_IDENT_FUNCTION>
    { return t; }
}

// pseudo
//     : ':' [ IDENT | FUNCTION S* IDENT S* ')' ]
//     ;
//
ICondition pseudo(ICondition pred) : {
    ICondition c = null;
    Token t;
    String function = null;
    String arg = null;
    ISimpleSelector simpleSel;
}
{
    <COLON> [<COLON>]
    (
        t = pseudoIdentifier()
        {
            // There appears to be an issue here regarding "first-letter" & "first-line"
            String s = unescape(t.image);
            c = m_conditionFactory.createPseudoClassCondition(null, s);
            return (pred == null)
                ? c
                : m_conditionFactory.createAndCondition(pred, c);
        }
        |
        (
            t = extendedIdentFunction()
            { function = unescape(t.image); }
            t = simpleArg() { arg = unescape(t.image); } ( <S> )*
            <RROUND>
            {
            	/* Handle the following:
            	E:nth-child(1)
            	E:nth-child(odd)     // not implemented yet
            	E:nth-child(even)	 // not implemented yet
            	E:nth-child(2n + 1)	 // not implemented yet
            	E:nth-last-child(2)
            	E:nth-of-type(id)
            	E:nth-last-of-type(4)
            	E:not(id)
            	E:lang(fr)
            	*/
            	String func = function.substring(0, function.length() - 1) ;
                c = m_conditionFactory.createPseudoFunction(func, unescape(arg));
                if (c == null) {
                    throw new CssParseException(
                        "Invalid pseudo function name " + function, getLocator());
                }
                return (pred == null)
                	? c
                    : m_conditionFactory.createAndCondition(pred, c);
            }
//            (
//        	// TODO selector support for not(*)
//		    (
//		        ( simpleSel = elementName()
//		            ( c = hash(c)
//		            | c = _class(c)
//		            | c = attrib(c)
//		            | c = pseudo(c)
//		            )*
//		        )
//		        |
//		        ( { simpleSel = m_selectorFactory.createElementSelector(null, null); }
//		            ( c = hash(c)
//		            | c = _class(c)
//		            | c = attrib(c)
//		            | c = pseudo(c)
//		            )+
//		        )
//		    )
//            ( <S> )*
//            ( <RROUND> )
//		    {
//		        if (c != null) {
//		            simpleSel = m_selectorFactory.createConditionalSelector(simpleSel, c);
//		            if ("not(".equalsIgnoreCase(function)) {
//		                c = m_conditionFactory.createNegativeCondition(c);
//		                return c;
//	                }
//		        }
//		        else if ("lang(".equalsIgnoreCase(function)) {
//                    c = m_conditionFactory.createLangCondition(unescape(arg));
//                    return (pred == null)
//                        ? c
//                        : m_conditionFactory.createAndCondition(pred, c);
//                }
//		    }
//		    )
        )
    )
}

ICondition hash(ICondition pred) : {
    Token t;
}
{
    t = <HASH>
    {
        ICondition c = m_conditionFactory.createIdCondition(t.image.substring(1));
        return (pred == null) ? c : m_conditionFactory.createAndCondition(pred, c);
    }
}

void styleDeclaration() : { }
{
    <LBRACE> ( <S> )*
    ( declaration() )?
    ( <SEMICOLON> ( <S> )* ( declaration() )? )*
    <RBRACE>
}

// declaration
//     : property ':' S* expr prio?
//     |
//     ;
//
void declaration() : {
    String p;
    ILexicalUnit e;  // used to be of type CSSValue
    boolean priority = false;
}
{
    try {
        p = property()
        <COLON> ( <S> )*
        e = expr()
        ( priority = prio() )?
        {
            m_docHandler.property(p, e, priority);
        }
    } catch (ParseException ex) {
        m_errorMessage.append("Exception in declaration: ").append(ex.getMessage()).append("\n");
        error_skipdecl();
    }
}

// prio
//     : IMPORTANT_SYM S*
//     ;
//
boolean prio() : { }
{
    <IMPORTANT_SYM> ( <S> )*
    { return true; }
}

// expr
//     : term [ operator term ]*
//     ;
//
// TODO: Deal with the operator
//
ILexicalUnit expr() : {
    ILexicalUnit head;
    ILexicalUnit body;
}
{
    head = term(null) { body = head; }
    ( ( body = operator(body) )? body = term(body) )*
    { return head; }
}

// term
//     : unary_operator?
//     [ NUMBER S* | PERCENTAGE S* | LENGTH S* | EMS S* | EXS S* | ANGLE S* | TIME S* | FREQ S* | function ]
//     | STRING S* | IDENT S* | URI S* | UNICODERANGE S* | RGB S* | RGBA S* | HSL S* | HSLA S* | hexcolor S*
//     ;
//
ILexicalUnit term(ILexicalUnit prev) : {
    Token t;
    char op = ' ';
    ILexicalUnit value = null;
//    RGBColor color;
//    HexColor h;
//    CSSValueImpl value = null;
}
{
    ( op = unaryOperator() )?
    (
        ( t = <NUMBER>        { value = DLexicalUnit.createNumber(prev, value(op, t.image)); }
        | t = <PERCENTAGE>    { value = DLexicalUnit.createPercentage(prev, value(op, t.image)); }
        | t = <LENGTH_PX>     { value = DLexicalUnit.createPixel(prev, value(op, t.image)); }
        | t = <LENGTH_CM>     { value = DLexicalUnit.createCentimeter(prev, value(op, t.image)); }
        | t = <LENGTH_MM>     { value = DLexicalUnit.createMillimeter(prev, value(op, t.image)); }
        | t = <LENGTH_IN>     { value = DLexicalUnit.createInch(prev, value(op, t.image)); }
        | t = <LENGTH_PT>     { value = DLexicalUnit.createPoint(prev, value(op, t.image)); }
        | t = <LENGTH_PC>     { value = DLexicalUnit.createPica(prev, value(op, t.image)); }
        | t = <EMS>         { value = DLexicalUnit.createEm(prev, value(op, t.image)); }
        | t = <EXS>         { value = DLexicalUnit.createEx(prev, value(op, t.image)); }
        | t = <ANGLE_DEG>     { value = DLexicalUnit.createDegree(prev, value(op, t.image)); }
        | t = <ANGLE_RAD>     { value = DLexicalUnit.createRadian(prev, value(op, t.image)); }
        | t = <ANGLE_GRAD>    { value = DLexicalUnit.createGradian(prev, value(op, t.image)); }
        | t = <TIME_MS>     { value = DLexicalUnit.createMillisecond(prev, value(op, t.image)); }
        | t = <TIME_S>        { value = DLexicalUnit.createSecond(prev, value(op, t.image)); }
        | t = <FREQ_HZ>     { value = DLexicalUnit.createHertz(prev, value(op, t.image)); }
        | t = <FREQ_KHZ>    { value = DLexicalUnit.createKiloHertz(prev, value(op, t.image)); }
        | t = <STRING>          { value = new DLexicalUnit(prev, ILexicalUnit.SAC_STRING_VALUE, t.image); }
        | t = <IDENT>           { value = new DLexicalUnit(prev, ILexicalUnit.SAC_IDENT, t.image); }
        | t = <EXTENDED_IDENT>  { value = new DLexicalUnit(prev, ILexicalUnit.SAC_IDENT, t.image); }
        | t = <URI>             { value = new DLexicalUnit(prev, ILexicalUnit.SAC_URI, t.image); }
        | t = <UNICODERANGE>    { value = new DLexicalUnit(prev, ILexicalUnit.SAC_UNICODERANGE, t.image); }
        | value = rgb(prev)
        | value = rgba(prev)
        | value = hsl(prev)
        | value = hsla(prev)
        | value = hexcolor(prev)
        | value = function(prev)  // do Function "AFTER" rgb(...) etc... since they are of same format...
        | t = <DIMEN> {
            int n = getLastNumPos(t.image);
            value = DLexicalUnit.createDimension(
                prev,
                value(op, t.image.substring(0, n+1)),
                t.image.substring(n+1));
        }
        | t = <INHERIT> { 
        	value = new DLexicalUnit(prev, ILexicalUnit.SAC_INHERIT, t.image); 
        }
        )
        ( <S> )*
    )

    { return value; }
}

// function
//     : FUNCTION S* expr ')' S*
//     ;
//
ILexicalUnit function(ILexicalUnit prev) : {
    Token t;
    ILexicalUnit params;
}
{
//???
    t = extendedIdentFunction() ( <S> )*
    params = expr()
    <RROUND> {
    	String v = t.image.toLowerCase() ;
        if (t.equals("counter(")) {
             return DLexicalUnit.createCounter(prev, params);
        } else if (t.equals("counters(")) {
             return DLexicalUnit.createCounters(prev, params);
        } else if (t.equals("attr(")) {
             return DLexicalUnit.createAttr(prev, params);
        } else if (t.equals("rect(")) {
             return DLexicalUnit.createRect(prev, params);
        }
        return DLexicalUnit.createFunction(
            prev,
            t.image.substring(0, t.image.length() - 1),
            params);
    }
}

// rgb
//     : RGB S* expr ')' S*
//     ;
//
ILexicalUnit rgb(ILexicalUnit prev) : {
    ILexicalUnit params;
}
{
    <RGB> ( <S> )*
    params = expr()
    <RROUND> {
        return DLexicalUnit.createRgbColor(prev, params);
    }
}

ILexicalUnit rgba(ILexicalUnit prev) : {
    ILexicalUnit params;
}
{
    <RGBA> ( <S> )*
    params = expr()
    <RROUND> {
        return DLexicalUnit.createRgbaColor(prev, params);
    }
}

ILexicalUnit hsl(ILexicalUnit prev) : {
    ILexicalUnit params;
}
{
    <HSL> ( <S> )*
    params = expr()
    <RROUND> {
        return DLexicalUnit.createHslColor(prev, params);
    }
}
ILexicalUnit hsla(ILexicalUnit prev) : {
    ILexicalUnit params;
}
{
    <HSLA> ( <S> )*
    params = expr()
    <RROUND> {
        return DLexicalUnit.createHslaColor(prev, params);
    }
}

// hexcolor
//     : HASH S*
//     ;
//
ILexicalUnit hexcolor(ILexicalUnit prev) : {
    Token t;
}
{
    t = <HASH> {
        int i = 1;
        int r = 0;
        int g = 0;
        int b = 0;
        int len = t.image.length() - 1;  // don't include the #

        if (len == 3) {
            r = Integer.parseInt(t.image.substring(i + 0, i + 1), 16);
            g = Integer.parseInt(t.image.substring(i + 1, i + 2), 16);
            b = Integer.parseInt(t.image.substring(i + 2, i + 3), 16);
            r = (r << 4) | r;
            g = (g << 4) | g;
            b = (b << 4) | b;
        } else if (len == 6) {
            r = Integer.parseInt(t.image.substring(i + 0, i + 2), 16);
            g = Integer.parseInt(t.image.substring(i + 2, i + 4), 16);
            b = Integer.parseInt(t.image.substring(i + 4, i + 6), 16);
        } else {
            m_errorMessage.append("Invalid color: ").append(t.image);
        }
        
        // turn into an "rgb()"
        ILexicalUnit lr = DLexicalUnit.createNumber(null, r);
        ILexicalUnit lc1 = DLexicalUnit.createComma(lr);
        ILexicalUnit lg = DLexicalUnit.createNumber(lc1, g);
        ILexicalUnit lc2 = DLexicalUnit.createComma(lg);
        DLexicalUnit.createNumber(lc2, b);

        return DLexicalUnit.createRgbColor(prev, lr);
    }
}

JAVACODE
float value(char op, String s) {
    return ((op == '-') ? -1 : 1) * Float.parseFloat(s);
}

JAVACODE
int getLastNumPos(String s) {
    int i;
    for (i = 0; i < s.length(); i++) {
        if (Character.isLetter(s.charAt(i))) {
            break;
        }
    }
    return i - 1;
}

JAVACODE
String unescape(String s) {
    int len = s.length();
    StringBuffer buf = new StringBuffer(len);
    int index = 0;

    while (index < len) {
        char c = s.charAt(index);
        if (c == '\\') {
            if (++index < len) {
                c = s.charAt(index);
                switch (c) {
                case '0': case '1': case '2': case '3': case '4':
                case '5': case '6': case '7': case '8': case '9':
                case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
                case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
                    int numValue = Character.digit(c, 16);
                    int count = 0;
                    int p = 16;

                    while (index + 1 < len && count < 6) {
                        c = s.charAt(index+1);

                        if (Character.digit(c, 16) != -1) {
                            numValue = (numValue * 16) + Character.digit(c, 16);
                            p *= 16;
                            index++;
                        } else {
                            if (c == ' ') {
                                // skip the latest white space
                                index++;
                            }
                            break;
                        }
                    }
                    buf.append((char) numValue);
                    break;
                    case '\n':
                    case '\f':
                    break;
                    case '\r':
                    if (index + 1 < len) {
                        if (s.charAt(index + 1) == '\n') {
                            index ++;
                        }
                    }
                    break;
                default:
                    buf.append(c);
                }
            } else {
                throw new CssParseException("invalid string " + s, getLocator());
            }
        } else {
            buf.append(c);
        }
        index++;
    }

    return buf.toString();
}

JAVACODE
void skipSelector() {
    Token t = getToken(1);
    while (t.kind != COMMA && t.kind != SEMICOLON && t.kind != LBRACE && t.kind != EOF ) {
        getNextToken();
        t = getToken(1);
    }
}

JAVACODE
String skip() {
    StringBuffer sb = new StringBuffer();
    int nesting = 0;
    Token t = getToken(0);
    if (t.image != null) {
    sb.append(t.image);    
    }
    do {
    t = getNextToken();
    if (t.kind == EOF)
        break;
    sb.append(t.image);
    if (t.kind == LBRACE)
        nesting++;
    else if (t.kind == RBRACE)
        nesting--;
    else if (t.kind == SEMICOLON && nesting <= 0)
        break;
    }
    while ((t.kind != RBRACE) || (nesting > 0));

    return sb.toString();
}

JAVACODE
void error_skipblock() {
    if (!m_quiet) {
        ParseException e = generateParseException();
        System.err.println( "** error_skipblock **\n" + e.toString() );
    }

    Token t;
    int nesting = 0;
    do {
    t = getNextToken();
    if( t.kind == LBRACE )
        nesting++;
    else if( t.kind == RBRACE )
        nesting--;
    else if( t.kind == EOF )
        break;
    }
    while ((t.kind != RBRACE) || (nesting > 0));
}

JAVACODE
void error_skipdecl() {
    if (!m_quiet) {
        ParseException e = generateParseException();
        System.err.println("** error_skipdecl **\n" + e.toString());
    }

    Token t = getToken(1);
    while (t.kind != SEMICOLON && t.kind != RBRACE && t.kind != EOF ) {
        getNextToken();
        t = getToken(1);
    }
}
