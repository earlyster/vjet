package org.ebayopensource.dsf.jstojava.codegen.data;

import org.ebayopensource.dsf.aggregator.jsref.JsFunc;
import org.ebayopensource.dsf.common.binding.IValueBinding;
import org.ebayopensource.dsf.aggregator.jsref.JsObj;
import org.ebayopensource.dsf.aggregator.jsref.internals.JsCmpMeta;
import org.ebayopensource.dsf.aggregator.jsref.JsTypeRef;
import org.ebayopensource.dsf.aggregator.jsref.JsObjData;
import org.ebayopensource.dsf.spec.component.IComponentSpec;
import org.ebayopensource.dsf.resource.pattern.js.JsResource;
import org.ebayopensource.dsf.resource.pattern.js.IJsResourceRef;

@org.ebayopensource.dsf.resource.utils.CodeGen("JsrGenerator")
public class OverloadMethodsJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.ebayopensource.dsf.jstojava.codegen.data.OverloadMethods", OverloadMethodsJsr.class, "OverloadMethods");

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec();

    public OverloadMethodsJsr(String arg0, String arg1){
        super(S.getJsCmpMeta(), true, arg0, arg1);
    }

    public OverloadMethodsJsr(IValueBinding<String> arg0, IValueBinding<String> arg1){
        super(S.getJsCmpMeta(), true, arg0, arg1);
    }

    public OverloadMethodsJsr(String arg0){
        super(S.getJsCmpMeta(), true, arg0);
    }

    public OverloadMethodsJsr(IValueBinding<String> arg0){
        super(S.getJsCmpMeta(), true, arg0);
    }

    public OverloadMethodsJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected OverloadMethodsJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public static JsFunc<Void> bar1(String arg0){
        return call(S, "bar1").with(arg0);
    }

    public static JsFunc<Void> bar1(IValueBinding<String> arg0){
        return call(S, "bar1").with(arg0);
    }

    public static JsFunc<Void> bar1(){
        return call(S, "bar1");
    }

    public static JsFunc<Void> bar2(String arg0){
        return call(S, "bar2").with(arg0);
    }

    public static JsFunc<Void> bar2(IValueBinding<String> arg0){
        return call(S, "bar2").with(arg0);
    }

    public static JsFunc<Void> bar2(){
        return call(S, "bar2");
    }

    public static JsFunc<Void> bar3(String arg0){
        return call(S, "bar3").with(arg0);
    }

    public static JsFunc<Void> bar3(IValueBinding<String> arg0){
        return call(S, "bar3").with(arg0);
    }

    public static JsFunc<Void> bar3(){
        return call(S, "bar3");
    }

    public static JsFunc<Void> bar4(){
        return call(S, "bar4");
    }

    public static JsFunc<Void> bar4(String arg0, String arg1){
        return call(S, "bar4").with(arg0, arg1);
    }

    public static JsFunc<Void> bar4(IValueBinding<String> arg0, IValueBinding<String> arg1){
        return call(S, "bar4").with(arg0, arg1);
    }

    public static JsFunc<Void> bar4(String arg0){
        return call(S, "bar4").with(arg0);
    }

    public static JsFunc<Void> bar4(IValueBinding<String> arg0){
        return call(S, "bar4").with(arg0);
    }

    public static JsFunc<Void> bar5(String arg0, String arg1){
        return call(S, "bar5").with(arg0, arg1);
    }

    public static JsFunc<Void> bar5(IValueBinding<String> arg0, IValueBinding<String> arg1){
        return call(S, "bar5").with(arg0, arg1);
    }

    public static JsFunc<Void> bar5(){
        return call(S, "bar5");
    }

    public static JsFunc<Void> bar5(String arg0){
        return call(S, "bar5").with(arg0);
    }

    public static JsFunc<Void> bar5(IValueBinding<String> arg0){
        return call(S, "bar5").with(arg0);
    }

    public static JsFunc<Void> bar6(String arg0, String arg1){
        return call(S, "bar6").with(arg0, arg1);
    }

    public static JsFunc<Void> bar6(IValueBinding<String> arg0, IValueBinding<String> arg1){
        return call(S, "bar6").with(arg0, arg1);
    }

    public static JsFunc<Void> bar7(String arg0, String arg1){
        return call(S, "bar7").with(arg0, arg1);
    }

    public static JsFunc<Void> bar7(IValueBinding<String> arg0, IValueBinding<String> arg1){
        return call(S, "bar7").with(arg0, arg1);
    }

    public static JsFunc<Void> bar8(String arg0, String arg1, String arg2, String arg3){
        return call(S, "bar8").with(arg0, arg1, arg2, arg3);
    }

    public static JsFunc<Void> bar8(IValueBinding<String> arg0, IValueBinding<String> arg1, IValueBinding<String> arg2, IValueBinding<String> arg3){
        return call(S, "bar8").with(arg0, arg1, arg2, arg3);
    }

    public JsFunc<Void> poo1(String arg0){
        return call("poo1").with(arg0);
    }

    public JsFunc<Void> poo1(IValueBinding<String> arg0){
        return call("poo1").with(arg0);
    }

    public JsFunc<Void> poo1(){
        return call("poo1");
    }

    public JsFunc<Void> poo2(String arg0){
        return call("poo2").with(arg0);
    }

    public JsFunc<Void> poo2(IValueBinding<String> arg0){
        return call("poo2").with(arg0);
    }

    public JsFunc<Void> poo2(){
        return call("poo2");
    }

    public JsFunc<Void> poo3(String arg0){
        return call("poo3").with(arg0);
    }

    public JsFunc<Void> poo3(IValueBinding<String> arg0){
        return call("poo3").with(arg0);
    }

    public JsFunc<Void> poo3(){
        return call("poo3");
    }

    public JsFunc<Void> poo4(){
        return call("poo4");
    }

    public JsFunc<Void> poo4(String arg0, String arg1){
        return call("poo4").with(arg0, arg1);
    }

    public JsFunc<Void> poo4(IValueBinding<String> arg0, IValueBinding<String> arg1){
        return call("poo4").with(arg0, arg1);
    }

    public JsFunc<Void> poo4(String arg0){
        return call("poo4").with(arg0);
    }

    public JsFunc<Void> poo4(IValueBinding<String> arg0){
        return call("poo4").with(arg0);
    }

    public JsFunc<Void> poo5(String arg0, String arg1){
        return call("poo5").with(arg0, arg1);
    }

    public JsFunc<Void> poo5(IValueBinding<String> arg0, IValueBinding<String> arg1){
        return call("poo5").with(arg0, arg1);
    }

    public JsFunc<Void> poo5(){
        return call("poo5");
    }

    public JsFunc<Void> poo5(String arg0){
        return call("poo5").with(arg0);
    }

    public JsFunc<Void> poo5(IValueBinding<String> arg0){
        return call("poo5").with(arg0);
    }

    public JsFunc<Void> poo6(String arg0, String arg1){
        return call("poo6").with(arg0, arg1);
    }

    public JsFunc<Void> poo6(IValueBinding<String> arg0, IValueBinding<String> arg1){
        return call("poo6").with(arg0, arg1);
    }

    public JsFunc<Void> poo7(String arg0, String arg1){
        return call("poo7").with(arg0, arg1);
    }

    public JsFunc<Void> poo7(IValueBinding<String> arg0, IValueBinding<String> arg1){
        return call("poo7").with(arg0, arg1);
    }

    public JsFunc<Void> poo8(String arg0, String arg1, String arg2, String arg3){
        return call("poo8").with(arg0, arg1, arg2, arg3);
    }

    public JsFunc<Void> poo8(IValueBinding<String> arg0, IValueBinding<String> arg1, IValueBinding<String> arg2, IValueBinding<String> arg3){
        return call("poo8").with(arg0, arg1, arg2, arg3);
    }
    
    public static JsTypeRef<OverloadMethodsJsr> prototype = new JsTypeRef<OverloadMethodsJsr>(S);
}