package org.ebayopensource.dsf.jstojava.codegen.data;

import org.ebayopensource.dsf.aggregator.jsref.JsFunc;
import org.ebayopensource.dsf.common.binding.IValueBinding;
import org.ebayopensource.dsf.aggregator.jsref.JsObj;
import org.ebayopensource.dsf.aggregator.jsref.internals.JsCmpMeta;
import org.ebayopensource.dsf.aggregator.jsref.JsTypeRef;
import org.ebayopensource.dsf.aggregator.jsref.JsObjData;
import org.ebayopensource.dsf.spec.component.IComponentSpec;
import org.ebayopensource.dsf.resource.pattern.js.JsResource;
import org.ebayopensource.dsf.resource.pattern.js.IJsResourceRef;
import com.ebay.jsbrowser.jsr.HTMLDivElementJsr;
import com.ebay.jsbrowser.jsr.HTMLSpanElementJsr;

@org.ebayopensource.dsf.resource.utils.CodeGen("JsrGenerator")
public class CTypeJsNativeJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.ebayopensource.dsf.jstojava.codegen.data.CTypeJsNative", CTypeJsNativeJsr.class, "CTypeJsNative");

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec();

    public CTypeJsNativeJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected CTypeJsNativeJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public static JsFunc<? extends HTMLDivElementJsr> test(HTMLSpanElementJsr arg1){
        return call(S, HTMLDivElementJsr.class, "test").with(arg1);
    }

    public static JsFunc<? extends HTMLDivElementJsr> test(IValueBinding<? extends HTMLSpanElementJsr> arg1){
        return call(S, HTMLDivElementJsr.class, "test").with(arg1);
    }

    public static JsFunc<? extends HTMLSpanElementJsr> test2(String n){
        return call(S, HTMLSpanElementJsr.class, "test2").with(n);
    }

    public static JsFunc<? extends HTMLSpanElementJsr> test2(IValueBinding<String> n){
        return call(S, HTMLSpanElementJsr.class, "test2").with(n);
    }
    
    public static JsTypeRef<CTypeJsNativeJsr> prototype = new JsTypeRef<CTypeJsNativeJsr>(S);
}