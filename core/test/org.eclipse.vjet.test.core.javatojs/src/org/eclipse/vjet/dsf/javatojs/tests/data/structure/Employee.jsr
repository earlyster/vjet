package org.ebayopensource.dsf.javatojs.tests.data.structure;

import org.ebayopensource.dsf.aggregator.jsref.JsFunc;
import org.ebayopensource.dsf.common.binding.IValueBinding;
import org.ebayopensource.dsf.aggregator.jsref.internals.JsCmpMeta;
import org.ebayopensource.dsf.aggregator.jsref.JsTypeRef;
import org.ebayopensource.dsf.aggregator.jsref.JsObjData;
import org.ebayopensource.dsf.spec.component.IComponentSpec;
import org.ebayopensource.dsf.resource.pattern.js.JsResource;
import org.ebayopensource.dsf.resource.pattern.js.IJsResourceRef;
import org.ebayopensource.dsf.javatojs.tests.data.PersonJsr;
import org.ebayopensource.dsf.javatojs.tests.data.IHandlerJsr;

@org.ebayopensource.dsf.resource.utils.CodeGen("JsrGenerator")
public final class EmployeeJsr extends PersonJsr implements IHandlerJsr {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.ebayopensource.dsf.javatojs.tests.data.structure.Employee", EmployeeJsr.class, "Employee", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec()
        .addDependentComponent(PersonJsr.ResourceSpec.getInstance())
        .addDependentComponent(IHandlerJsr.ResourceSpec.getInstance());

    public EmployeeJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected EmployeeJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public JsFunc<Boolean> handle(boolean debug){
        return call(Boolean.class, "handle").with(debug);
    }

    public JsFunc<Boolean> handle(IValueBinding<Boolean> debug){
        return call(Boolean.class, "handle").with(check(debug));
    }

    public JsFunc<String> toString_(){
        return call(String.class, "toString");
    }
    
    public static JsTypeRef<EmployeeJsr> prototype = new JsTypeRef<EmployeeJsr>(S);
}