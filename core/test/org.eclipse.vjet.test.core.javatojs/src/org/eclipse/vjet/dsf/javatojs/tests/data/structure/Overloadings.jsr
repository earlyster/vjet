package org.ebayopensource.dsf.javatojs.tests.data.structure;

import org.ebayopensource.dsf.aggregator.jsref.JsFunc;
import org.ebayopensource.dsf.common.binding.IValueBinding;
import org.ebayopensource.dsf.aggregator.jsref.JsObj;
import org.ebayopensource.dsf.aggregator.jsref.internals.JsCmpMeta;
import org.ebayopensource.dsf.aggregator.jsref.JsTypeRef;
import org.ebayopensource.dsf.aggregator.jsref.JsObjData;
import org.ebayopensource.dsf.spec.component.IComponentSpec;
import org.ebayopensource.dsf.resource.pattern.js.JsResource;
import org.ebayopensource.dsf.resource.pattern.js.IJsResourceRef;

@org.ebayopensource.dsf.resource.utils.CodeGen("JsrGenerator")
public class OverloadingsJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.ebayopensource.dsf.javatojs.tests.data.structure.Overloadings", OverloadingsJsr.class, "Overloadings", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec();

    public OverloadingsJsr(int size, int multipler){
        super(S.getJsCmpMeta(), true, size, multipler);
    }

    public OverloadingsJsr(IValueBinding<Integer> size, IValueBinding<Integer> multipler){
        super(S.getJsCmpMeta(), true, size, multipler);
    }

    public OverloadingsJsr(int size, boolean triple){
        super(S.getJsCmpMeta(), true, size, triple);
    }

    public OverloadingsJsr(IValueBinding<Integer> size, IValueBinding<Boolean> triple, org.ebayopensource.dsf.aggregator.jsref.d.D1... notUsed){
        super(S.getJsCmpMeta(), true, size, triple);
    }

    public OverloadingsJsr(int size){
        super(S.getJsCmpMeta(), true, size);
    }

    public OverloadingsJsr(IValueBinding<Integer> size){
        super(S.getJsCmpMeta(), true, size);
    }

    public OverloadingsJsr(int[] size){
        super(S.getJsCmpMeta(), true, size);
    }

    public OverloadingsJsr(IValueBinding<Integer[]> size, org.ebayopensource.dsf.aggregator.jsref.d.D1... notUsed){
        super(S.getJsCmpMeta(), true, size);
    }

    public OverloadingsJsr(String[] size){
        super(S.getJsCmpMeta(), true, size);
    }

    public OverloadingsJsr(IValueBinding<String[]> size, org.ebayopensource.dsf.aggregator.jsref.d.D2... notUsed){
        super(S.getJsCmpMeta(), true, size);
    }

    protected OverloadingsJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public static final JsFunc<Integer> testStaticFinal(){
        return call(S, Integer.class, "testStaticFinal");
    }

    public static final <T> JsFunc<Integer> testStaticFinal(T amount){
        return call(S, Integer.class, "testStaticFinal").with(amount);
    }

    public static final <T> JsFunc<Integer> testStaticFinal(IValueBinding<? extends T> amount){
        return call(S, Integer.class, "testStaticFinal").with(amount);
    }

    public final JsFunc<Integer> testFinal(){
        return call(Integer.class, "testFinal");
    }

    public final <T> JsFunc<Integer> testFinal(T amount){
        return call(Integer.class, "testFinal").with(amount);
    }

    public final <T> JsFunc<Integer> testFinal(IValueBinding<? extends T> amount){
        return call(Integer.class, "testFinal").with(amount);
    }
    
    public static JsTypeRef<OverloadingsJsr> prototype = new JsTypeRef<OverloadingsJsr>(S);
}