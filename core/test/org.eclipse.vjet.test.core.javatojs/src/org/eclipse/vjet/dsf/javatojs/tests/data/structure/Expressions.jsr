package org.ebayopensource.dsf.javatojs.tests.data.structure;

import org.ebayopensource.dsf.aggregator.jsref.JsFunc;
import org.ebayopensource.dsf.common.binding.IValueBinding;
import org.ebayopensource.dsf.aggregator.jsref.JsObj;
import org.ebayopensource.dsf.aggregator.jsref.internals.JsCmpMeta;
import org.ebayopensource.dsf.aggregator.jsref.JsTypeRef;
import org.ebayopensource.dsf.aggregator.jsref.JsObjData;
import org.ebayopensource.dsf.spec.component.IComponentSpec;
import org.ebayopensource.dsf.resource.pattern.js.JsResource;
import org.ebayopensource.dsf.resource.pattern.js.IJsResourceRef;

@org.ebayopensource.dsf.resource.utils.CodeGen("JsrGenerator")
public class ExpressionsJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.ebayopensource.dsf.javatojs.tests.data.structure.Expressions", ExpressionsJsr.class, "Expressions", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec();

    public ExpressionsJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected ExpressionsJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public JsFunc<Long> arithmetic(int start){
        return call(Long.class, "arithmetic").with(start);
    }

    public JsFunc<Long> arithmetic(IValueBinding<Integer> start){
        return call(Long.class, "arithmetic").with(start);
    }

    public JsFunc<Integer> type(Object obj){
        return call(Integer.class, "type").with(obj);
    }

    public JsFunc<Void> space(){
        return call("space");
    }
    
    public static JsTypeRef<ExpressionsJsr> prototype = new JsTypeRef<ExpressionsJsr>(S);
}