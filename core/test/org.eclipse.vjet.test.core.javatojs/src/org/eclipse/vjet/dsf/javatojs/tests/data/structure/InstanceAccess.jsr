package org.ebayopensource.dsf.javatojs.tests.data.structure;

import org.ebayopensource.dsf.aggregator.jsref.JsFunc;
import org.ebayopensource.dsf.common.binding.IValueBinding;
import org.ebayopensource.dsf.aggregator.jsref.JsObj;
import org.ebayopensource.dsf.aggregator.jsref.internals.JsCmpMeta;
import org.ebayopensource.dsf.aggregator.jsref.JsTypeRef;
import org.ebayopensource.dsf.aggregator.jsref.JsObjData;
import org.ebayopensource.dsf.spec.component.IComponentSpec;
import org.ebayopensource.dsf.resource.pattern.js.JsResource;
import org.ebayopensource.dsf.resource.pattern.js.IJsResourceRef;
import vjo.java.lang.BooleanUtilJsr;
import org.ebayopensource.dsf.javatojs.tests.data.structure.MethodsJsr;
import org.ebayopensource.dsf.javatojs.tests.data.structure.FieldsJsr;

@org.ebayopensource.dsf.resource.utils.CodeGen("JsrGenerator")
public class InstanceAccessJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.ebayopensource.dsf.javatojs.tests.data.structure.InstanceAccess", InstanceAccessJsr.class, "InstanceAccess", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec()
        .addDependentComponent(BooleanUtilJsr.ResourceSpec.getInstance());

    public InstanceAccessJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected InstanceAccessJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public JsFunc<Void> foo(InstanceAccessJsr x, int a){
        return call("foo").with(x, a);
    }

    public JsFunc<Void> foo(IValueBinding<? extends InstanceAccessJsr> x, IValueBinding<Integer> a){
        return call("foo").with(x, a);
    }

    public JsFunc<Void> bar(FieldsJsr f, MethodsJsr m){
        return call("bar").with(f, m);
    }

    public JsFunc<Void> bar(IValueBinding<? extends FieldsJsr> f, IValueBinding<? extends MethodsJsr> m){
        return call("bar").with(f, m);
    }
    
    public static JsTypeRef<InstanceAccessJsr> prototype = new JsTypeRef<InstanceAccessJsr>(S);
}