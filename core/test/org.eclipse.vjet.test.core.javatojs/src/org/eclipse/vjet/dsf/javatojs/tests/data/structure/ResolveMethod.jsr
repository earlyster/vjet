package org.ebayopensource.dsf.javatojs.tests.data.structure;

import org.ebayopensource.dsf.aggregator.jsref.JsFunc;
import org.ebayopensource.dsf.common.binding.IValueBinding;
import org.ebayopensource.dsf.aggregator.jsref.JsObj;
import org.ebayopensource.dsf.aggregator.jsref.internals.JsCmpMeta;
import org.ebayopensource.dsf.aggregator.jsref.JsTypeRef;
import org.ebayopensource.dsf.aggregator.jsref.JsObjData;
import org.ebayopensource.dsf.spec.component.IComponentSpec;
import org.ebayopensource.dsf.resource.pattern.js.JsResource;
import org.ebayopensource.dsf.resource.pattern.js.IJsResourceRef;

@org.ebayopensource.dsf.resource.utils.CodeGen("JsrGenerator")
public class ResolveMethodJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.ebayopensource.dsf.javatojs.tests.data.structure.ResolveMethod", ResolveMethodJsr.class, "ResolveMethod", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec();

    public ResolveMethodJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected ResolveMethodJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public static JsFunc<Integer> foo(int[] intArr){
        return call(S, Integer.class, "foo").with((Object)intArr);
    }

    public static JsFunc<Integer> foo(IValueBinding<Integer[]> intArr){
        return call(S, Integer.class, "foo").with(intArr);
    }

    public JsFunc<Integer> bar(int[] intArr){
        return call(Integer.class, "bar").with((Object)intArr);
    }

    public JsFunc<Integer> bar(IValueBinding<Integer[]> intArr){
        return call(Integer.class, "bar").with(intArr);
    }

    public JsFunc<Integer> revolveFoo(){
        return call(Integer.class, "revolveFoo");
    }

    public JsFunc<Integer> resolveBar(){
        return call(Integer.class, "resolveBar");
    }
    
    public static JsTypeRef<ResolveMethodJsr> prototype = new JsTypeRef<ResolveMethodJsr>(S);
}